// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  	provider = "prisma-client-js"
}

datasource db {
	provider = "postgresql"
	url      = env("DATABASE_URL")
}

model User {
	id        String   @id @default(cuid())
	email     String   @unique
	firstName String?
	lastName  String?	
	password  String   
	createdAt DateTime @default(now())
	updatedAt DateTime @updatedAt
	isEmailVerified Boolean @default(false)
}

model VerificationToken {
	id        Int	   @id @default(autoincrement())
	userId    String
	token     String   @unique @default(uuid())
	type      TokenType @default(EmailVerification)
	utilized  Boolean  @default(false)
	createdAt DateTime @default(now())
	updatedAt DateTime @updatedAt
}

model Quiz {
	id          String     @id @default(cuid())
	title       String
	description String?
	authorId    String
	leaderboard Boolean    @default(false)
	timeLimit   Int?
	createdAt   DateTime   @default(now())
	updatedAt   DateTime   @updatedAt
	expire 		Boolean?
	expiresAt   DateTime?
	published   Boolean    @default(false)
}

model Question {
	id        String   @id @default(cuid())
	text      String
	quizId    String
	createdAt DateTime @default(now())
	updatedAt DateTime @updatedAt
	points	  Float?
	booleanAnswer Boolean?
	type	  QuestionType
}

model Option {
	id         String   @id @default(cuid())
	text       String
	isCorrect  Boolean  @default(false)
	questionId String
	createdAt  DateTime @default(now())
	updatedAt  DateTime @updatedAt
}

// model Answer {
// 	id         String   @id @default(cuid())
// 	userId     String
// 	questionId String
// 	optionIds  String[] @default([])
// 	optionId   String?
// 	textAnswer String?
// 	createdAt  DateTime @default(now())
// 	updatedAt  DateTime @updatedAt
// }

// model Attempt {
// 	id          String      @id @default(cuid())
// 	userId      String      // ID of the user attempting the quiz
// 	quizId      String
// 	startTime   DateTime
// 	endTime     DateTime?
// 	isScored	Boolean     @default(false)
// 	score       Float?
// 	completed   Boolean     @default(false)
// 	createdAt   DateTime    @default(now())
// 	updatedAt   DateTime    @updatedAt
// }

enum QuestionType {
	MultiChoice
	Essay
	Boolean
}

enum TokenType {
	EmailVerification
	PasswordReset
}